Generators:
    ☐ Generators break the typical “run to completion” model of normal functions and can start, pause, and reset.
    ☐ Generators use the syntax of a normal function, but have an asterisk following the function keyword: 
        function* generator { … } .
    ☐ The generator 'yield' keyword signals when to ‘pause’ the function and return its current state.
    ☐ Generator instances don’t use the new keyword like the typical function prototype or Object.
    ☐ Using the generator’s special next() method allows us to access its yielded state.
    ☐ Passing values to the next() method introduces a way for generators to reset, or complete their runtime.
    ☐ An iterator in JavaScript demonstrates a type of object that can access values in a collection one at a time.
    ☐ A generatorcan provide a convenient and complex alternative to iterators.